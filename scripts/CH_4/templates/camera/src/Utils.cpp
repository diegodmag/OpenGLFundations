#include "Utils.h"

void Utils::printShaderLog(GLuint shader){
    int len=0;
    int chWrittn=0;
    char * log; 
    glGetShaderiv(shader,GL_INFO_LOG_LENGTH, &len);
    if(len>0){
        log=(char*)malloc(len);
        glGetShaderInfoLog(shader, len, &chWrittn,log);
        cout<< "Shader Info Log: "<<log<<endl;
        free(log);
    }
}

void Utils::printProgramLog(int prog){
    int len=0; 
    int chWrittn=0;
    char * log; 
    glGetProgramiv(prog, GL_INFO_LOG_LENGTH, &len);
    if (len > 0) {
		log = (char *)malloc(len);
		glGetProgramInfoLog(prog, len, &chWrittn, log);
		cout << "Program Info Log: " << log << endl;
		free(log);
    }       
}

const bool Utils::checkOpenGLError(){
    bool foundError = false;
    int glErr = glGetError();
    while (glErr != GL_NO_ERROR) {
        cout << "glError: " << glErr << endl;
        foundError = true;
        glErr = glGetError();
    }
    return foundError;
    
}

const string Utils::readShaderSource(const char* filePath)
{
    string content; 
    ifstream fileStream(filePath, ios::in);
    string line = "";

    while (!fileStream.eof()) {
            getline(fileStream, line);
            content.append(line + "\n");
    }
    fileStream.close();
    return content;
}

const GLuint Utils::createShaderProgram(const char *vp, const char *fp){
    //Variables for handling errors
    GLint vertCompiled;
    GLint fragCompiled;
    GLint linked; 

    //Vertex shader 
    /**
     * The primary function of a vertex shader is send each vertex down to the pipeline
     */
    string vertexShaderStr = readShaderSource(vp); //Hay que poner un mensaje de error o no se pudo leer 
    const char *vshaderSource = vertexShaderStr.c_str();
    
    //Fragment shader
    /**
     * The purpose of any fragment shader is to set the RGB color of a pixel to be displayed
     * Pixel colors are generated by the fragment shader. But they are placed in the color buffer- it is
     * the color buffer that is ultimately written in the screen
     */
    string fragShaderStr = readShaderSource(fp);
    const char *fshaderSource = fragShaderStr.c_str();


    //Create empty shaders and asign id
    GLuint vShader = glCreateShader(GL_VERTEX_SHADER); //This creates an id so that we can refer it later
    GLuint fShader = glCreateShader(GL_FRAGMENT_SHADER);
    //Loading shader src a) shader object to store the shader, b) number of strings in the shader source code 
    glShaderSource(vShader, 1, &vshaderSource, NULL); 
    glShaderSource(fShader, 1, &fshaderSource, NULL);
    //glShaderSource loads the strings in vshaderSource and fshaderSource into the ids
    //Compile shaders 
    glCompileShader(vShader);
    
    //Catch errors while compiling shaders  
    checkOpenGLError(); 
    glGetShaderiv(vShader, GL_COMPILE_STATUS, &vertCompiled);
    if(vertCompiled !=1){
        cout << "vertex shader compilation failed" << '\n';
        printShaderLog(vShader);
    }
    
    glCompileShader(fShader);
    checkOpenGLError(); 
    glGetShaderiv(fShader, GL_COMPILE_STATUS, &fragCompiled);
    if(vertCompiled !=1){
        cout << "vertex shader compilation failed" << '\n';
        printShaderLog(fShader);
    }
    GLuint vfProgram = glCreateProgram();

    //Catch errors while linking shaders 
    glAttachShader(vfProgram, vShader);
    glAttachShader(vfProgram, fShader);
    glLinkProgram(vfProgram);//This instruction ensures that the shaders are compatible with the program
    glGetProgramiv(vfProgram, GL_LINK_STATUS, &linked);
    if (linked != 1) {
        cout << "linking failed" << endl;
        printProgramLog(vfProgram);
    }

    return vfProgram;
}